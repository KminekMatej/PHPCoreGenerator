<?php

namespace CG_TMP_PROJECTNAME\App\Services;

use CG_TMP_PROJECTNAME\App\Model\IdObject;

/**
 * Description of TableService
 * Generated by CoreGenerator
 *
 * @author kminekmatej, CG_TMP_DATE
 */
abstract class TableService {
    
    const CZECH_DATETIME = "j.n.Y H:i";
    const CZECH_DATE_NO_YEAR = "j.n.";
    const CZECH_DATE = "j.n.Y";
    const TIME = "H:i:s";
    const TIME_H_M = "H:i";
    const MYSQL_DATE = "Y-m-d";
    const MYSQL_DATETIME = "Y-m-d H:i:s";
    
    abstract public function find($id);
    
    abstract public function findAll();

    abstract protected function map($result);

    abstract protected function getScheme();

    abstract protected function getTable();
    
    abstract protected function getIdField();

    const DB_HOST = "localhost";
    const DB_USER = "";
    const DB_PASSWORD = "";
    const DB_DATABASENAME = "";
    const DB_PORT = 3306;
    
    /** @var \mysqli */
    protected $dbConnection;
    
    function __construct() {
        $this->dbConnection = mysqli_connect(self::DB_HOST, self::DB_USER, self::DB_PASSWORD, self::DB_DATABASENAME, self::DB_PORT);
    }
    
    /** @return IdObject */
    protected function findId($id) {
        if($id == NULL) return NULL;
        $ps = $this->dbConnection->prepare("SELECT * FROM " . self::tick($this->getTable()) . " WHERE " . self::tick($this->getIdField()) . " = ?");
        $ps->bind_param("i", $id);
        $ps->execute();
        return $this->map($ps->get_result());
    }
    
    /** @return IdObject[] */
    protected function mapAll($result){
        $objects = [];
        foreach ($result as $row) {
            $objects[] = $this->map((object) $row);
        }
        return $objects;
    }

    public function findAllId($order = NULL, $limit = NULL, $offset = NULL) {
        $q = "SELECT * FROM " . self::tick($this->getTable()) . " WHERE 1";
        if($order) $q .= " ORDER BY ?";
        if($limit || $offset) $q .= " LIMIT ?,?";
        
        $ps = $this->dbConnection->prepare($q);
        if($order) $ps->bind_param("s", $order);
        if($limit || $offset){
            $ps->bind_param("i", $offset);
            $ps->bind_param("i", $limit);
        }
        
        $ps->execute();
        
        $objects = [];
        while ($row = $ps->get_result()->fetch_assoc()){
            $objects[] = $row;
        }
        return $this->mapAll($objects);
    }

    protected function getDateTime($sqlObj) {
        if( is_numeric($sqlObj) && (int)$sqlObj == $sqlObj ) return DateTime::createFromFormat ("U", (int)$sqlObj);
        return $sqlObj == "0000-00-00 00:00:00" ? new DateTime("1990-01-01 00:00:00") : new DateTime($sqlObj);
    }
    
    public function update($id, array $fieldsToEdit){
        $scheme = $this->getScheme();
        $updateFields = [];

        foreach ($scheme as $dbField) {
            if(!array_key_exists($dbField->getField(), $fieldsToEdit))
                continue;
            if (!$dbField->isChangeable())
                continue;
            $updateFields[$dbField->getField()] = $fieldsToEdit[$dbField->getField()];
        }
        
        if(empty($updateFields)) return FALSE;

        $q = "UPDATE ".self::tick($this->getTable())." SET";
        
        foreach ($updateFields as $key => $value) {
            $q .= " $key = ?";
        }
        
        $q .= " WHERE " . self::tick($this->getIdField()) . " = $id";
        
        $ps = $this->dbConnection->prepare($q);
        
        foreach ($updateFields as $key => $value) {
            $ps->bind_param((is_int($value) ? "i" : "s"), $value);
        }
        $ps->bind_param("i", $id);
        return $ps->execute();
    }
    
    public function updateIgnoreNull(IdObject $entity) {
        $orig = $this->findId($entity->getId());
        $scheme = $this->getScheme();
        $updateFields = [];

        foreach ($scheme as $dbField) {
            $field = $dbField->getField();
            if (!$dbField->isChangeable())
                continue;
            $prop = $dbField->getProperty();
            $getter = "get" . ucfirst($prop);

            $origVal = $orig->$getter();
            $newVal = $entity->$getter();
            if ($origVal != $newVal && $newVal !== NULL) {
                $updateFields[$field] = $newVal;
            }
        }
        return $this->updateIgnoreNull($entity->getId(), $updateFields);
    }
    
    /** @return IdObject */
    public function create(IdObject $entity){
        $scheme = $this->getScheme();
        $createFieldNames = [];
        $createFieldValues = [];
        foreach ($scheme as $dbField) {
            $field = $dbField->getField();
            if (!$dbField->isChangeable())
                continue;
            $prop = $dbField->getProperty();
            $getter = "get" . ucfirst($prop);

            $value = $entity->$getter();
            
            if ($value != NULL) {
                $createFieldNames[] = self::tick($field);
                $createFieldValues[] = $value;
            }
        }
        
        if(empty($createFieldNames)) return FALSE;

        $q = "INSERT INTO " . self::tick($this->getTable()) . " (". join(",", $createFieldNames).") VALUES (". join(",",array_fill(0, count($createFieldValues), "?")).")";
        
        $ps = $this->dbConnection->prepare($q);
        
        foreach ($createFieldValues as $value) {
            $ps->bind_param((is_int($value) ? "i" : "s"), $value);
        }
        
        if($ps->execute() === FALSE) return FALSE;
        $lastId = $ps->insert_id;
        return $this->findId($lastId);
    }

    public function delete($id) {
        $q = "DELETE FROM " . self::tick($this->getTable()) . " WHERE " . self::tick($this->getIdField()) . " = ?";
        $ps = $this->dbConnection->prepare($q);
        $ps->bind_param("i", $id);
        return $ps->execute();
    }
    
    public static function tick($value){
        return "`$value`";
    }

}
